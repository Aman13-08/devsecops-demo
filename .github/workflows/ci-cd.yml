name: Node.js CI/CD Pipeline

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'kubernetes/deployment.yaml'   
  pull_request:
    branches:
      - main

jobs:
  lint:
    name: üîç Static Code Analysis
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        name: Checkout Code

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

  test:
    name: üß™ Unit Tests & Coverage
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4
        name: Checkout Code

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Run Tests
        run: npm test

      - name: Archive Test Coverage
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage-report
          path: coverage/

  build:
    name: üèóÔ∏è Build Stage
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - uses: actions/checkout@v4
        name: Checkout Code

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Build Project
        run: npm run build

      - name: Archive Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/

  docker-build-and-scan:
    name: üê≥ Build & Scan Docker Image
    runs-on: ubuntu-latest
    needs: [build]
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,format=long
            type=ref,event=branch
            latest

      - name: Build & Push Docker Image
        id: docker_build
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Install Trivy for Security Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:sha-${{github.sha}}"
          format: "table"
          exit-code: 1  # Fail CI if vulnerabilities are found
          ignore-unfixed: true

  deploy:
    name: üöÄ Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs: [docker-build-and-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config --global user.email "dev@example.com"
          git config --global user.name "GitHub Actions"

      - name: Update Kubernetes Manifest
        env:
          REGISTRY: ghcr.io
          IMAGE_NAME: ${{ github.repository }}
          IMAGE_TAG: sha-${{github.sha}}
        run: |
          IMAGE=${{env.REGISTRY}}/${{env.IMAGE_NAME}}:${IMAGE_TAG}
          sed -i "s+image: ghcr.io.*+image: ${IMAGE}+g" kubernetes/deployment.yaml
          git add kubernetes/deployment.yaml
          git commit -m "Updated Kubernetes deployment with new image tag: ${IMAGE_TAG}" || echo "No changes to commit"
          git push origin main

      - name: Apply Kubernetes Deployment
        run: |
          kubectl apply -f kubernetes/deployment.yaml
